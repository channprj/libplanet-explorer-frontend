{"version":3,"sources":["webpack:///./src/pages/block.tsx","webpack:///./src/misc/useQueryString.ts","webpack:///./src/generated/graphql.tsx"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","office_ui_fabric_react__WEBPACK_IMPORTED_MODULE_1__","gatsby__WEBPACK_IMPORTED_MODULE_2__","_misc_useQueryString__WEBPACK_IMPORTED_MODULE_3__","office_ui_fabric_react_lib_DetailsList__WEBPACK_IMPORTED_MODULE_4__","office_ui_fabric_react_lib_DetailsList__WEBPACK_IMPORTED_MODULE_5__","office_ui_fabric_react_lib_DetailsList__WEBPACK_IMPORTED_MODULE_6__","_generated_graphql__WEBPACK_IMPORTED_MODULE_7__","TxList","_ref4","txs","columns","key","name","fieldName","minWidth","maxWidth","isRowHeader","isResizable","isSorted","isSortedDescending","data","isPadded","onRender","tx","a","createElement","href","id","Fragment","actions","length","items","selectionMode","SelectionMode","none","getKey","setKey","layoutMode","DetailsListLayoutMode","justified","isHeaderVisible","onItemInvoked","navigate","BlockPage","_ref","location","_useQueryString","useQueryString","queryString","hash","variables","_ref2","loading","error","block","index","nonce","miner","timestamp","previousBlock","difficulty","transactions","useMemo","search","substr","useCallback","path","pathname","withPrefix","BlockCommonFragmentDoc","gql","_templateObject","TransactionCommonFragmentDoc","_templateObject2","BlockListDocument","_templateObject3","BlockListComponent","props","react__WEBPACK_IMPORTED_MODULE_2__","_apollo_react_components__WEBPACK_IMPORTED_MODULE_3__","Object","assign","query","BlockByHashDocument","_templateObject4","BlockByHashComponent","TransactionByIdDocument","_templateObject5","TransactionByIdComponent"],"mappings":"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","file":"component---src-pages-block-tsx-a7e18d6d7710e5fb5a5c.js","sourcesContent":["import React from 'react';\nimport { Link } from 'office-ui-fabric-react';\nimport { navigate } from 'gatsby';\nimport useQueryString from '../misc/useQueryString';\nimport {\n  DetailsList,\n  DetailsListLayoutMode,\n  SelectionMode,\n  IColumn,\n} from 'office-ui-fabric-react/lib/DetailsList';\nimport { BlockByHashComponent, Transaction } from '../generated/graphql';\n\ninterface BlockPageProps {\n  location: Location;\n}\n\nconst BlockPage: React.FC<BlockPageProps> = ({ location }) => {\n  const [queryString, setQueryString] = useQueryString(location);\n  const hash = queryString;\n  return (\n    <BlockByHashComponent variables={{ hash }}>\n      {({ data, loading, error }) => {\n        if (loading) return <p>loading&hellip;</p>;\n        if (error) return <p>error!</p>;\n        const { block } = data!;\n        if (!block)\n          return (\n            <p>\n              No such block: <code>{hash}</code>\n            </p>\n          );\n        return (\n          <dl>\n            <dt>Index</dt>\n            <dd>{block.index}</dd>\n            <dt>Hash</dt>\n            <dd>\n              <code>{block.hash}</code>\n            </dd>\n            <dt>Nonce</dt>\n            <dd>\n              <code>{block.nonce}</code>\n            </dd>\n            <dt>Miner</dt>\n            <dd>\n              <code>{block.miner}</code>\n            </dd>\n            <dt>Timestamp</dt>\n            <dd>{block.timestamp}</dd>\n            <dt>Previous hash</dt>\n            <dd>\n              {block.previousBlock ? \n                <a href={`/block/?${block.previousBlock.hash}`}>\n                  <code>{block.previousBlock.hash}</code>\n                </a> : \"N/A\"}\n            </dd>\n            <dt>Difficulty</dt>\n            <dd>{block.difficulty}</dd>\n            <dt>Transactions</dt>\n            <TxList txs = {block.transactions as NonNullable<Transaction[]>}/>\n          </dl>\n        );\n      }}\n    </BlockByHashComponent>\n  );\n};\n\ninterface TxListProps {\n  txs: Pick<Transaction, 'id' | 'signer' | 'timestamp'>[];\n}\n\nconst TxList: React.FC<TxListProps> = ({ txs }) => {\n  const columns: IColumn[] = [\n    {\n      key: 'columnId',\n      name: 'Id',\n      fieldName: 'id',\n      minWidth: 50,\n      maxWidth: 300,\n      isRowHeader: true,\n      isResizable: true,\n      isSorted: false,\n      isSortedDescending: true,\n      data: 'string',\n      isPadded: true,\n      onRender: tx => (\n        <Link href={`/transaction/?${tx.id}`}>{tx.id}</Link>\n      ),\n    },\n    {\n      key: 'columnSigner',\n      name: 'Signer',\n      fieldName: 'signer',\n      minWidth: 50,\n      maxWidth: 250,\n      isRowHeader: true,\n      isResizable: true,\n      isSorted: false,\n      isSortedDescending: false,\n      data: 'string',\n      isPadded: true\n    },\n    {\n      key: 'columnTimestamp',\n      name: 'Timestamp',\n      fieldName: 'timestamp',\n      minWidth: 50,\n      maxWidth: 200,\n      isRowHeader: true,\n      isResizable: true,\n      isSorted: false,\n      isSortedDescending: true,\n      data: 'string',\n      isPadded: true,\n    },\n    {\n      key: 'columnActionNumber',\n      name: 'Action #',\n      minWidth: 20,\n      maxWidth: 40,\n      isRowHeader: true,\n      isResizable: true,\n      isSorted: false,\n      isSortedDescending: false,\n      data: 'number',\n      isPadded: true,\n      onRender: tx => <>{tx.actions.length}</>,\n    },\n  ];\n  return (\n    <DetailsList\n      items={txs}\n      columns={columns}\n      selectionMode={SelectionMode.none}\n      getKey={tx => tx.id}\n      setKey=\"set\"\n      layoutMode={DetailsListLayoutMode.justified}\n      isHeaderVisible={true}\n      onItemInvoked={tx => navigate(`/transaction/?${tx.id}`)}\n    />\n  );\n};\n\nexport default BlockPage;\n","import { useCallback, useMemo } from 'react';\nimport { navigate, withPrefix } from 'gatsby';\n\nexport default function useQueryString(location: Location) {\n  const queryString = useMemo(() => location.search.substr(1), [location]);\n  const setQueryString = useCallback((queryString: string) => {\n    const path = location.pathname.substr(withPrefix('/').length - 1);\n    navigate(path + (queryString ? `?${queryString}` : ''));\n  }, [location, navigate]);\n  return [queryString, setQueryString] as const;\n}\n","import gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nexport type Maybe<T> = T | null;\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n  Address: any,\n  ByteString: any,\n  DateTimeOffset: any,\n  Date: any,\n  DateTime: any,\n  Decimal: any,\n  Milliseconds: any,\n  Seconds: any,\n};\n\nexport type Action = {\n  __typename?: 'Action',\n  arguments: Array<ActionArgumentType>,\n};\n\nexport type ActionArgumentType = {\n  __typename?: 'ActionArgumentType',\n  key: Scalars['String'],\n  value: Scalars['String'],\n};\n\n\nexport type Block = {\n  __typename?: 'Block',\n  difficulty: Scalars['Int'],\n  hash: Scalars['ID'],\n  index: Scalars['Int'],\n  miner: Scalars['Address'],\n  nonce: Scalars['ByteString'],\n  previousBlock?: Maybe<Block>,\n  timestamp: Scalars['DateTimeOffset'],\n  transactions: Array<Transaction>,\n};\n\nexport type BlockQuery = {\n  __typename?: 'BlockQuery',\n  block?: Maybe<Block>,\n  blocks: Array<Block>,\n  transaction?: Maybe<Transaction>,\n};\n\n\nexport type BlockQueryBlockArgs = {\n  hash?: Maybe<Scalars['ID']>\n};\n\n\nexport type BlockQueryBlocksArgs = {\n  desc?: Maybe<Scalars['Boolean']>,\n  offset?: Maybe<Scalars['Int']>,\n  limit?: Maybe<Scalars['Int']>,\n  excludeEmptyTxs?: Maybe<Scalars['Boolean']>\n};\n\n\nexport type BlockQueryTransactionArgs = {\n  id?: Maybe<Scalars['ID']>\n};\n\n\n\n\n\n\n\n\nexport type Transaction = {\n  __typename?: 'Transaction',\n  actions: Array<Action>,\n  id: Scalars['ID'],\n  nonce: Scalars['Int'],\n  publicKey: Scalars['ByteString'],\n  signature: Scalars['ByteString'],\n  signer: Scalars['Address'],\n  timestamp: Scalars['DateTimeOffset'],\n  updatedAddresses: Array<Scalars['Address']>,\n};\nexport type BlockCommonFragment = ({ __typename?: 'Block' } & Pick<Block, 'hash' | 'index' | 'difficulty' | 'timestamp'>);\n\nexport type TransactionCommonFragment = ({ __typename?: 'Transaction' } & Pick<Transaction, 'id' | 'nonce' | 'publicKey' | 'signature' | 'signer' | 'timestamp' | 'updatedAddresses'> & { actions: Array<({ __typename?: 'Action' } & { arguments: Array<({ __typename?: 'ActionArgumentType' } & Pick<ActionArgumentType, 'key' | 'value'>)> })> });\n\nexport type BlockListQueryVariables = {\n  offset: Scalars['Int'],\n  limit: Scalars['Int'],\n  excludeEmptyTxs: Scalars['Boolean']\n};\n\n\nexport type BlockListQuery = ({ __typename?: 'BlockQuery' } & { blocks: Array<({ __typename?: 'Block' } & Pick<Block, 'miner'> & { transactions: Array<({ __typename?: 'Transaction' } & Pick<Transaction, 'id'>)> } & BlockCommonFragment)> });\n\nexport type BlockByHashQueryVariables = {\n  hash?: Maybe<Scalars['ID']>\n};\n\n\nexport type BlockByHashQuery = ({ __typename?: 'BlockQuery' } & { block: Maybe<({ __typename?: 'Block' } & Pick<Block, 'miner' | 'nonce'> & { previousBlock: Maybe<({ __typename?: 'Block' } & Pick<Block, 'hash'>)>, transactions: Array<({ __typename?: 'Transaction' } & TransactionCommonFragment)> } & BlockCommonFragment)> });\n\nexport type TransactionByIdQueryVariables = {\n  id?: Maybe<Scalars['ID']>\n};\n\n\nexport type TransactionByIdQuery = ({ __typename?: 'BlockQuery' } & { transaction: Maybe<({ __typename?: 'Transaction' } & TransactionCommonFragment)> });\nexport const BlockCommonFragmentDoc = gql`\n    fragment BlockCommon on Block {\n  hash\n  index\n  difficulty\n  timestamp\n}\n    `;\nexport const TransactionCommonFragmentDoc = gql`\n    fragment TransactionCommon on Transaction {\n  actions {\n    arguments {\n      key\n      value\n    }\n  }\n  id\n  nonce\n  publicKey\n  signature\n  signer\n  timestamp\n  updatedAddresses\n}\n    `;\nexport const BlockListDocument = gql`\n    query BlockList($offset: Int!, $limit: Int!, $excludeEmptyTxs: Boolean!) {\n  blocks(desc: true, offset: $offset, limit: $limit, excludeEmptyTxs: $excludeEmptyTxs) {\n    ...BlockCommon\n    miner\n    transactions {\n      id\n    }\n  }\n}\n    ${BlockCommonFragmentDoc}`;\nexport type BlockListComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<BlockListQuery, BlockListQueryVariables>, 'query'> & ({ variables: BlockListQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const BlockListComponent = (props: BlockListComponentProps) => (\n      <ApolloReactComponents.Query<BlockListQuery, BlockListQueryVariables> query={BlockListDocument} {...props} />\n    );\n    \nexport type BlockListProps<TChildProps = {}> = ApolloReactHoc.DataProps<BlockListQuery, BlockListQueryVariables> & TChildProps;\nexport function withBlockList<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  BlockListQuery,\n  BlockListQueryVariables,\n  BlockListProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, BlockListQuery, BlockListQueryVariables, BlockListProps<TChildProps>>(BlockListDocument, {\n      alias: 'withBlockList',\n      ...operationOptions\n    });\n};\nexport type BlockListQueryResult = ApolloReactCommon.QueryResult<BlockListQuery, BlockListQueryVariables>;\nexport const BlockByHashDocument = gql`\n    query BlockByHash($hash: ID) {\n  block(hash: $hash) {\n    ...BlockCommon\n    miner\n    nonce\n    previousBlock {\n      hash\n    }\n    transactions {\n      ...TransactionCommon\n    }\n  }\n}\n    ${BlockCommonFragmentDoc}\n${TransactionCommonFragmentDoc}`;\nexport type BlockByHashComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<BlockByHashQuery, BlockByHashQueryVariables>, 'query'>;\n\n    export const BlockByHashComponent = (props: BlockByHashComponentProps) => (\n      <ApolloReactComponents.Query<BlockByHashQuery, BlockByHashQueryVariables> query={BlockByHashDocument} {...props} />\n    );\n    \nexport type BlockByHashProps<TChildProps = {}> = ApolloReactHoc.DataProps<BlockByHashQuery, BlockByHashQueryVariables> & TChildProps;\nexport function withBlockByHash<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  BlockByHashQuery,\n  BlockByHashQueryVariables,\n  BlockByHashProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, BlockByHashQuery, BlockByHashQueryVariables, BlockByHashProps<TChildProps>>(BlockByHashDocument, {\n      alias: 'withBlockByHash',\n      ...operationOptions\n    });\n};\nexport type BlockByHashQueryResult = ApolloReactCommon.QueryResult<BlockByHashQuery, BlockByHashQueryVariables>;\nexport const TransactionByIdDocument = gql`\n    query TransactionById($id: ID) {\n  transaction(id: $id) {\n    ...TransactionCommon\n  }\n}\n    ${TransactionCommonFragmentDoc}`;\nexport type TransactionByIdComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<TransactionByIdQuery, TransactionByIdQueryVariables>, 'query'>;\n\n    export const TransactionByIdComponent = (props: TransactionByIdComponentProps) => (\n      <ApolloReactComponents.Query<TransactionByIdQuery, TransactionByIdQueryVariables> query={TransactionByIdDocument} {...props} />\n    );\n    \nexport type TransactionByIdProps<TChildProps = {}> = ApolloReactHoc.DataProps<TransactionByIdQuery, TransactionByIdQueryVariables> & TChildProps;\nexport function withTransactionById<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  TransactionByIdQuery,\n  TransactionByIdQueryVariables,\n  TransactionByIdProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, TransactionByIdQuery, TransactionByIdQueryVariables, TransactionByIdProps<TChildProps>>(TransactionByIdDocument, {\n      alias: 'withTransactionById',\n      ...operationOptions\n    });\n};\nexport type TransactionByIdQueryResult = ApolloReactCommon.QueryResult<TransactionByIdQuery, TransactionByIdQueryVariables>;"],"sourceRoot":""}